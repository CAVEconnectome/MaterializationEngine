name: Update Dependency

on:
  workflow_dispatch:
    inputs:
      dependency:
        description: "Name of the dependency to update"
        required: true
        type: string
      version:
        description: "New version of the dependency"
        required: true
        type: string
      bump_type:
        description: "Type of version bump to perform after updating dependency"
        type: choice
        required: true
        default: "minor"
        options: ["major", "minor", "patch"]

jobs:
  update-dependency:
    name: Update ${{ github.event.inputs.dependency }} dependency
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
          
      - name: Update dependency in pyproject.toml
        run: |
          echo "Updating ${{ github.event.inputs.dependency }} to version ${{ github.event.inputs.version }}"
          
          # Update in pyproject.toml dependencies section
          if [ -f "pyproject.toml" ]; then
            # Handle both quoted and unquoted dependency specifications
            sed -i "s/\"${{ github.event.inputs.dependency }}[^\"]*\"/\"${{ github.event.inputs.dependency }}>=${{ github.event.inputs.version }}\"/g" pyproject.toml
            sed -i "s/'${{ github.event.inputs.dependency }}[^']*'/'${{ github.event.inputs.dependency }}>=${{ github.event.inputs.version }}'/g" pyproject.toml
            echo "Updated pyproject.toml"
          fi
          
          # Update in requirements.txt if it exists
          if [ -f "requirements.txt" ]; then
            sed -i "s/^${{ github.event.inputs.dependency }}==.*/${{ github.event.inputs.dependency }}==${{ github.event.inputs.version }}/" requirements.txt
            echo "Updated requirements.txt"
          fi
          
          # Update in requirements.in if it exists  
          if [ -f "requirements.in" ]; then
            sed -i "s/^${{ github.event.inputs.dependency }}.*/${{ github.event.inputs.dependency }}>=${{ github.event.inputs.version }}/" requirements.in
            echo "Updated requirements.in"
          fi
          
      - name: Update uv.lock file
        run: |
          echo "Updating uv.lock file for ${{ github.event.inputs.dependency }}"
          
          # Try targeted update first (faster, less disruptive)
          for i in {1..3}; do
            echo "Attempt $i/3: Running uv sync --no-upgrade (targeted update)..."
            if uv sync --no-upgrade; then
              echo "✅ Targeted uv sync succeeded on attempt $i"
              echo "Only ${{ github.event.inputs.dependency }} was updated, other dependencies unchanged"
              echo "UPDATE_TYPE=targeted" >> $GITHUB_ENV
              break
            else
              echo "❌ Targeted uv sync failed on attempt $i (likely dependency conflicts)"
              if [ $i -eq 3 ]; then
                echo "Targeted updates failed, falling back to full dependency resolution..."
                
                # Fallback to full sync (resolves conflicts but updates more deps)
                for j in {1..3}; do
                  echo "Fallback attempt $j/3: Running full uv sync..."
                  if uv sync; then
                    echo "✅ Full uv sync succeeded on attempt $j"
                    echo "Dependency conflicts resolved, multiple packages may have been updated"
                    echo "UPDATE_TYPE=full" >> $GITHUB_ENV
                    break
                  else
                    echo "❌ Full uv sync failed on attempt $j"
                    if [ $j -lt 3 ]; then
                      echo "Waiting 30 seconds before retry..."
                      sleep 30
                    else
                      echo "All sync attempts failed - dependency resolution impossible"
                      exit 1
                    fi
                  fi
                done
                break
              else
                echo "Waiting 30 seconds before retry..."
                sleep 30
              fi
            fi
          done
          echo "Updated uv.lock"
          
      - name: Commit dependency update
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          git diff --staged --quiet || git commit -m "Update ${{ github.event.inputs.dependency }} to v${{ github.event.inputs.version }}

          Auto-generated dependency update triggered by ${{ github.event.inputs.dependency }} release"
          git push

  release:
    name: Release with updated dependency
    needs: update-dependency
    uses: ./.github/workflows/release.yml
    with:
      part: ${{ github.event.inputs.bump_type }}
      dry-run: false
    secrets: inherit